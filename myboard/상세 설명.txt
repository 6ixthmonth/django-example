# MYSQL 연동 방법
1. 드라이버 설치
  - MySQL DB API Drivers를 설치한다. `mysqlclient`와 `MySQL Connector/Python` 두 종류가 있는데 전자를 추천한다.
  - pip를 통해 설치한다.
```shell
py -m pip install mysqlclient
```

2. 데이터베이스 접속 정보 설정
  - 데이터베이스 종류, 데이터베이스 이름, 접속할 때 사용할 사용자 이름, 비밀번호 등을 설정한다.
```python
# settings.py
DATABASES = {
    'default' : {
        'ENGINE': 'django.db.backends.mysql',  # 데이터베이스 종류.
        'NAME': 'myboard',  # 데이터베이스 이름.
        'USER': 'root',  # 접속할 때 사용할 사용자 이름.
        'PASSWORD': 'password',  # 비밀번호
        'HOST': 'localhost',  # 데이터베이스가 위치한 컴퓨터의 IP 주소.
        'PORT': '3306',  # 포트 번호.
    }
}
```
또는,
```python
# settings.py
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'OPTIONS': {
            'read_default_file': str(BASE_DIR / 'my.cnf'),
        },
    },
}
# my.cnf
[client]
database = myboard
user = root
password = 1234
default-character-set = utf8
```

3. 데이터베이스 접속
  - 테이블을 직접 만들거나 모델 작성 후 `migrate` 명령어를 통해 자동으로 생성한다.
  - 모델의 설정대로 데이터베이스의 테이블을 조작할 수 있다.

***

# 템플릿/정적 파일 공통 경로 설정
- 템플릿/정적 파일을 저장하는 폴더는 각 앱 하위의 폴더로 설정하는 것도 가능하지만, 모든 앱이 공통으로 사용할 수 있게 상위 폴더를 생성하여 설정할 수도 있다.
1. 템플릿 파일
  - settings.py 파일에서 TEMPLATES 설정을 변경한다.
  - 설정한 경로에 폴더를 생성하여 템플릿 파일을 저장한다.
```python
# settings.py
TEMPLATES = [
    {
        ...
        'DIRS': [BASE_DIR / 'templates'],
        ...
    },
]
```

2. 정적 파일
  - settings.py 파일에서 STATICFILES_DIRS 설정을 변경한다.
  - 설정한 경로에 폴더를 생성하여 정적 파일을 저장한다.
```python
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]
```

***