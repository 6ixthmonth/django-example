# 개요 및 목표

이 프로젝트는 데이터베이스 설정, 마이그레이션, 모델 생성에 대해 다룬다.
올바르게 따라한다면 이 프로젝트와 유사한 결과물을 얻을 수 있다.


# 주요 배경 이론 및 문법

## 데이터베이스 설정
- settings.py 파일의 DATABASES 값을 사용해서 이 프로젝트에서 사용할 데이터베이스를 설정할 수 있다.
- 그밖에도 장고 프로젝트에서 데이터베이스를 연동할 때는 언어 설정, 시간대 등의 값을 다음과 같이 설정하길 권장한다.
  - LANGUAGE_CODE = 'ko-kr' => 언어 코드. 기본 값은 'en-us'. 관리자 화면 등에서 표시할 언어에 영향을 준다. 설정한 언어 코드를 적용시키려면 USE_I18N 옵션의 값을 True로 설정해야 한다.
  - TIME_ZONE = 'Asia/Seoul' => 서버가 가동되는 지역의 시간대. 기본 값은 'America/Chicago'. 필수는 아니지만 설정을 권장하며 특히 윈도우 환경에서는 더더욱 그러하다고 한다.
  - USE_I18N = True => 장고에서 번역 시스템을 활성화시킬지 여부.
  - USE_TZ = True => 장고에서 시간대를 반영한 datetime 객체를 사용할지 여부.

# 마이그레이션
- 앱의 설정 파일을 읽어서 필요한 데이터베이스 테이블을 자동으로 생성해주는 기능.
- settings.py 파일의 INSTALLED_APPS 목록에 등록된 앱들에 대해서 실행되어, 해당 앱에 등록된 모델 설정에 따라 필요한 테이블을 자동으로 생성한다.
- 올바르게 실행했다면 터미널에서 진행 상황이 출력되는 것을 확인할 수 있고, 또한 앱 폴더 내 migrations 폴더에 마이그레이션 기록 파일이 생성된 것을 확인할 수 있다.
- (명령 프롬프트에서) python manage.py migrate [앱 이름] [마이그레이션 파일 이름]
- 앱 이름을 입력하지 않으면 INSTALLED_APPS 목록에 작성된 모든 앱에 대해서 작업을 실행한다.
- 마이그레이션 파일 이름을 작성하지 않으면 가장 최신 파일에 대해서 작업을 실행한다.

# 모델
- 레코드를 표현하기 위한 클래스.

# 마이그레이션 파일 생성
- (명령 프롬프트에서) python manage.py makemigrations [앱 이름]

# SQL문 확인
- (명령 프롬프트에서) python manage.py sqlmigrate 앱_이름 마이그레이션_파일_이름
