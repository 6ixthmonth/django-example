# 개요 및 목표

이 프로젝트는 템플릿에 대해 다룬다.
올바르게 따라한다면 이 프로젝트와 유사한 결과물을 얻을 수 있다.


# 주요 배경 이론 및 문법

## 뷰에 변수 전달하기
- urls.py 파일의 path() 함수의 url 패턴에 자료형과 변수명을 추가한다.
  - path('<int:question_id>/', views.detail, name='detail')
- views.py 파일의 뷰 함수에 매개변수를 추가한다.
  - def detail(request, question_id):
  -     ...

## 템플릿(template)
- 기본적으로 html 등의 텍스트 파일을 말한다. 브라우저 화면에 표시할 내용을 매번 뷰 함수에서 정의해서 응답하면 유지보수에 문제가 발생하기 때문에 별도의 파일을 작성해서 연결하는 게 보편적인 방법이다.
- 장고에서는 여기에 추가로 템플릿 엔진을 탑재하여 템플릿 언어를 통해 조건문, 반복문 등 다양한 기능을 사용할 수 있다.
- settings.py 파일의 TEMPLATES 옵션을 통해 적용하고자 하는 템플릿 백엔드를 변경하는 등 다양한 설정을 할 수 있다.
- 템플릿 파일은 위의 옵션에서 지정한 폴더에 저장하거나, 옵션 설정에 따라 앱 하위 폴더에 작성할 수도 있다.
  - <앱 이름>/templates/<앱 이름>/<템플릿 이름>.html

## 뷰 함수에서 템플릿 파일 연결
from django.http import HttpResponse
from django.template import loader
template = loader.get_template('<템플릿 경로/템플릿 이름>.html')
context = {'변수 이름': <변수 값>,}
return HttpResponse(template.render(context, request))
혹은
from django.shortcuts import render
...
return render(request, '<템플릿 경로/템플릿 이름>.html', context)

## 404 오류 처리
from django.http import Http404
...
raise Http404("오류 메시지")
혹은
from django.shortcuts import get_object_or_404
result = get_object_or_404(<모델명>)

## 템플릿 언어
### 변수
- {{ <변수 이름> }}
- 서버에서 전달한 변수를 클라이언트에 표현할 수 있다.
- 변수의 이름은 알파벳, 숫자, 언더스코어("_")를 사용할 수 있으나 숫자와 언더스코어로 시작할 수 없다.
- 도트(".")를 이용해서 변수의 속성에 접근할 수 있다.
  - {{ <변수 이름>.<속성 이름> }}
  - 속성을 찾을 때는 사전, 속성 또는 메소드, 인덱스 순으로 탐색한다. 따라서 사전을 재정의한 객체를 사용할 때 의도치 않게 동작할 수 있으니 주의해야 한다.

### 태그
- {% <태그 이름> %}
- 조건문, 반복문 등을 표현할 수 있다.
- {% if <조건식> %} {% endif %}
  - 조건식에 비교, 논리, 멤버십, 동일 연산자 등을 사용할 수 있다.
- {% for <변수 이름> in <iterable> %} {% endfor %}
  - 목록, 튜플, dictitems 등을 사용할 수 있다.
- {% url %}
  - 주어진 뷰 및 선택적 매개변수와 일치하는 절대 경로 참조를 반환한다.
- {% block <블록 이름> %} {% endblock %} {% extends "템플릿 이름" %}
- {% include %}

### 주석
- {# 주석 내용 #}
- {% comment %} ... {% endcomment %}

### 필터
- 필터를 사용해서 변수를 조작할 수 있다.
  - {{ <변수 이름>|<필터> }}
- 필터를 연쇄적으로 사용할 수 있다.
  - {{ <변수 이름>|<필터1>|<필터2>|<필터3>|... }}

- {{ value|add:"2" }}
  - value에 인수를 추가한다. 숫자, 문자열, 목록 등을 추가할 수 있다.
- {{ value|length }}
  - value의 길이를 반환한다. 문자열과 목록 모두에 대해 동작한다.
- {{ value|default:"nothing" }}
  - 만약 value가 False라면, 주어진 default를 사용한다.
- {{ value|default_if_none:"nothing" }}
  - 만약 value가 None이라면, 주어진 default를 사용한다.

- {{ value|capfirst }}
  - value의 첫 번째 문자를 대문자로 변환한다.
- {{ value|title }}
  - value의 각 단어의 첫 번째 문자를 대문자, 나머지 문자를 소문자로 변환한다.
- {{ value|upper }}
  - 문자열을 모두 대문자로 변환한다.
- {{ value|lower }}
  - 문자열을 모두 소문자로 변환한다.
- "{{ value|ljust:"10" }}"
  - 주어진 폭에 대해 value를 좌측 정렬한다.
- "{{ value|rjust:"10" }}"
  - 주어진 폭에 대해 value를 우측 정렬한다.
- "{{ value|center:"15" }}"
  - 주어진 폭에 대해 value를 가운데 정렬한다.
- {{ value|cut:" " }}
  - 주어진 문자열에서 모든 인수를 제거한다.
- {{ value|truncatechars:7 }}
  - 지정된 수보다 긴 문자열을 자른다.
- {{ value|join:"_" }}
  - 파이썬의 str.join(list) 처럼 문자열 목록을 조인한다.

- {{ value|date:"Y-m-d" }}
  - 날짜 형식을 주어진 양식에 따른다.
- {{ value|time:"H:i:s" }}
  - 시간 형식을 주어진 양식에 따른다.
