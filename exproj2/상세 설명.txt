** 예제의 목표 **
이 프로젝트는 앱을 생성하는 방법, URL 패턴과 뷰 함수 작성, 요청 응답 처리 과정에 대한 이해를 돕기 위해 만들어졌다.
올바르게 따라한다면 이 프로젝트와 유사한 결과물을 얻을 수 있다.


** 주요 배경 이론 및 문법 **
* 앱 vs 프로젝트
- 앱은 어떤 기능을 수행하기 위한 웹 애플리케이션의 일부분을 일컫는 표현이고 프로젝트는 앱의 모음으로써 웹 애플리케이션을 나타낸다.
- 여러 개의 앱이 하나의 프로젝트에 포함될 수 있으며, 이렇게 여러 개의 앱이 모여 하나의 프로젝트, 즉 웹 사이트가 된다.

* 앱 생성
- (명령 프롬프트에서) python manage.py startapp [앱 이름]
- 앱을 생성하도록 명령하면 프로젝트 폴더 하위에 지정한 앱 이름으로 폴더가 생성된다.
- 앱 폴더 안에 주요 기본 파일 또한 자동으로 생성된다.

* 뷰
- 사용자가 브라우저에서 주소창에 적절한 URL을 입력하여 요청을 하게 되면 이를 뷰가 처리한다.
- 뷰는 가동되는 프로젝트에서 발생된 요청을 처리하고 어떻게 응답할지 그 방식을 정의한다.
- 뷰는 함수 또는 클래스 등의 형태로 작성될 수 있다.

* 주요 파일
- exapp1/views.py: 뷰를 작성하는 스크립트 파일.
 - django.http.HttpResponse: 응답할 때 사용하는 객체. 브라우저에 표현할 코드를 문자열 형태로 입력받는다.
- exapp1/urls.py: 해당 앱에서 사용할 urlpatterns를 저장하는 스크립트 파일. 자동으로 만들어주지 않기 때문에 직접 작성해야 한다.
 - urlpatterns: path() 함수 실행 결과를 목록 형태로 저장하는 변수. 이 변수의 이름대로 해당 앱(프로젝트)에서 인식할 URL 패턴들의 모음이다. 이 변수 안에 있는 URL 값 중 하나로 요청이 들어오면 처리할 수 있다.
 - django.urls.path: 앱(프로젝트)에서 인식시킬 URL 값과, 이를 처리해줄 뷰 함수(또는 클래스)를 연결시켜주는 함수.
- exproj2/urls.py: 최상위 URLconf 파일. 이 장고 프로젝트에서 처리할 URL 선언들을 저장한다.
 - django.urls.include: 하위 URLconf 파일을 불러올 때 사용하는 함수.

- 요청과 응답