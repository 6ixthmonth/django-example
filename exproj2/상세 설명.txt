# 개요 및 목표

이 프로젝트는 앱을 생성하는 방법, URL 패턴과 뷰 함수 작성, 요청과 응답의 처리 과정에 대한 이해를 돕기 위한 예제다.
올바르게 따라한다면 이 프로젝트와 유사한 결과물을 얻을 수 있다.


# 주요 배경 이론 및 문법

## 앱 생성
- (명령 프롬프트에서) python manage.py startapp [앱 이름]
- 앱을 생성하도록 명령하면 프로젝트 폴더 하위에 지정한 앱 이름으로 폴더가 생성된다.
- 앱 폴더 안에 주요 기본 파일 또한 자동으로 생성된다.

## 앱과 프로젝트
- 앱은 웹 애플리케이션의 일부분으로써 특정 역할을 수행한다. ex) 사용자 관련 앱, 게시판 관련 앱 등
- 프로젝트는 앱의 모음으로써 웹 애플리케이션을 나타낸다. ex) 회원제 게시판 웹 사이트, 쇼핑몰 웹 사이트 등
- 하나의 프로젝트에 여러 개의 앱이 포함될 수 있으며, 여러 개의 앱이 모여 하나의 프로젝트, 즉 웹 사이트가 된다.

## 뷰
- 사용자가 브라우저의 주소창에 적절한 URL을 입력하여 요청 메시지를 발생시키면 이를 서버 측의 뷰가 처리한다.
- 뷰는 가동 중인 프로젝트에서 발생되는 요청을 처리하고 어떻게 응답할지 그 방식을 정의한다.
- 뷰는 함수 또는 클래스 등의 형태로 작성할 수 있다.

## 요청과 응답
- 요청은 클라이언트에서 서버로 보내는 메시지다. 사용자가 브라우저의 주소창에 적절한 URL을 입력하면 요청이 발생하여 서버로 메시지를 보내게 된다.
- 응답은 서버에서 클라이언트로 보내는 메시지다. 요청 메시지를 받은 서버에서 이를 적절하게 처리하여 결과를 클라이언트로 보내면 사용자가 브라우저에서 확인할 수 있다.

## 주요 파일
- <프로젝트 이름>/urls.py: 최상위 URLconf 파일. 이 장고 프로젝트에서 인식하고 처리할 URL 패턴들을 저장한다.
  - urlpatterns: 변수의 이름대로 프로젝트(앱)에서 인식하고 처리할 URL 패턴들의 모음이다. path() 함수 실행 결과를 목록 형태로 저장한다. 패턴이 일치하는 주소 값으로 요청이 들어오면 응답할 수 있다.
  - django.urls.path: 프로젝트(앱)에서 인식할 URL 패턴과, 이를 처리할 뷰 함수(또는 클래스)를 연결시켜주는 함수.
  - django.urls.include: 하위 URLconf 파일을 불러올 때 사용하는 함수.
- <앱 이름>/urls.py: 해당 앱에서 인식할 URL 패턴을 저장하는 URLconf 파일. 자동으로 만들어주지 않기 때문에 직접 작성해야 한다.
- <앱 이름>/views.py: 해당 앱에서 처리할 뷰 함수(또는 클래스)를 작성하는 스크립트 파일.
  - django.http.HttpResponse: 응답할 때 사용하는 객체. 브라우저에서 표현할 코드를 문자열 형태로 입력받는다.
